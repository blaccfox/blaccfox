
    #pragma comment (lib, "User32.lib")

    #include <Windows.h>

    static LPCWSTR ClassNameElement;

    static LRESULT CALLBACK WindowProc
    (
    HWND value_handle,
    UINT unsignedInteger__Message,
    WPARAM value_wideParameter,
    LPARAM value_longParameter
    );

    static WNDCLASS WindowClassGetter(HINSTANCE value_handleInstance);

    static HWND WindowHandleGetter(HINSTANCE value_handleInstance);

    static void WindowMessageLoop();

    int __stdcall WINAPI WinMain
    (
    _In_ HINSTANCE item_handleInstance,
    _In_opt_ HINSTANCE entry_handleInstance,
    _In_ LPSTR longPointer__CommandLine,
    _In_ int integer__CommandShow
    )
    {
        int* resultLRESULT = nullptr;   
    
        ClassNameElement = L"MyWindowClass";

        WNDCLASS valueWindowClas;
    
        valueWindowClas = WindowClassGetter(item_handleInstance);

        RegisterClass(&valueWindowClas);

        HWND valueHandle;
   
        valueHandle = WindowHandleGetter(item_handleInstance);   

        ShowWindow(valueHandle, integer__CommandShow);

        UpdateWindow(valueHandle);

        WindowMessageLoop();

        int valueLRESULT;

        valueLRESULT = 0;

        resultLRESULT = &valueLRESULT;

        return *resultLRESULT;
    }

    LRESULT CALLBACK WindowProc(HWND value_handle, UINT unsignedInteger__Message, WPARAM value_wideParameter, LPARAM value_longParameter)
    {
        switch (unsignedInteger__Message)
        {
            case WM_DESTROY:
                PostQuitMessage(0);
                break;

            default:
                return DefWindowProc(value_handle, unsignedInteger__Message, value_wideParameter, value_longParameter);
        }

        return 0;
    }

    WNDCLASS WindowClassGetter(HINSTANCE value_handleInstance)
    {
        WNDCLASS* resultWNDCLASS = nullptr;

        WNDCLASS valueWNDCLASS;

        valueWNDCLASS = { 0 };

        valueWNDCLASS.lpfnWndProc = WindowProc;

        valueWNDCLASS.hInstance = value_handleInstance;

        valueWNDCLASS.lpszClassName = ClassNameElement;

        resultWNDCLASS = &valueWNDCLASS;

        return *resultWNDCLASS;
    }

    HWND WindowHandleGetter(HINSTANCE value_handleInstance)
    {
        HWND* resultHandle = nullptr;

        HWND valueHandle;

        valueHandle = CreateWindowEx
    (
    0,
    ClassNameElement,
    L"C/C++ Main Graphics User Interface",
    WS_OVERLAPPEDWINDOW,
    CW_USEDEFAULT, CW_USEDEFAULT,
    800, 600,
    NULL,
    NULL,
    value_handleInstance,
    NULL
    );
        resultHandle = &valueHandle;

        return *resultHandle;
    }

    void WindowMessageLoop()
    {
        MSG valueMessage;

        while (true)
        {
            bool isEqualAbcdCheck, shouldBreakAbcdCheck;

            isEqualAbcdCheck = GetMessage(&valueMessage, NULL, 0, 0) == true;

            shouldBreakAbcdCheck = isEqualAbcdCheck == false;

            if (shouldBreakAbcdCheck == true) 
            {
                break;
            }

            TranslateMessage(&valueMessage);

            DispatchMessage(&valueMessage);

            continue;
        }

        return;
    }